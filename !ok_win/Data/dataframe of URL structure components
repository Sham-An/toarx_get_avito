#!!!!!DIR TO LIST !!!!!!
#parts = urlparse(url)
#print(parts)
#directories = parts.path.strip('/').split('/')
#print(directories)

def url_parser(url):

    parts = urlparse(url)
    directories = parts.path.strip('/').split('/')
    queries = parts.query.strip('&').split('&')

    elements = {
        'scheme': parts.scheme,
        'netloc': parts.netloc,
        'path': parts.path,
        'params': parts.params,
        'query': parts.query,
        'fragment': parts.fragment,
        'directories': directories,
        'queries': queries,
    }

    return elements


def url_components_to_df(df, url='url'):
    """Parses a dataframe of URLs and returns a dataframe of URL components.

    Args:
        df (object): Pandas dataframe containing URLs.
        url (string, optional): Optional name of column containing URL, if not 'url'.

    Return:
        df (object): Pandas dataframe containing URL components.
    """

    df_output = pd.DataFrame(columns = ['scheme', 'netloc', 'path',
                                        'params', 'query', 'fragment',
                                        'directories', 'queries'])

    for index, row in df.iterrows():

        elements = url_parser(row['url'])

        page = {
            'scheme': elements['scheme'],
            'netloc': elements['netloc'],
            'path': elements['path'],
            'params': elements['params'],
            'query': elements['query'],
            'fragment': elements['fragment'],
            'directories': elements['directories'],
            'queries': elements['queries'],
        }

        df_output = df_output.append(page, ignore_index=True)

    return df_output

if __name__ = '__main__':
df_output = url_components_to_df(df_sitemap)
df_output.tail()